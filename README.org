#+title: Readme
#+author: faultypointer
#+date: <2025-04-17 Thu>

* 1 Billion Row Chanllenge
intro to 1brc ...

* Comparisions
** First Attempt: Basic with BufReader and HashMap
see commit: [[https://github.com/faultypointer/OneBRC/commit/e660d6d95bacb2826cd1f44e02b53f192bfcc694][e660d6d]]
*** Time
- 50 Million rows took somewhere around 9.7-9.9 seconds
- Full Billon rows took 149.293 seconds

*** Explanation
Created a BufReader for reading the file. From the std docs "A `BufReader<R>` performs large, infrequent reads on the underlying `Read` and maintains an in-memory buffer of the results."

To store the data, I used a `HashMap<String, StationData>`. The `StationData` is a struct I defined.
#+begin_src rust
struct StationData {
    count: u32,
    min: f64,
    max: f64,
    sum: f64,
}
#+end_src

Then for each line read from the buffered reader, I split into station name and the temperature. Using the station name as the key, look into the map. If it is in the map, take the old data out and create the new data using the old data and the newly read temperature.
(Maybe updating the old data instead of creating a new one improves it). If it is not then we just put a new one.

And then finally to present the data in sorted manner, collect the hashmap into vector and sort the vector using the keys.

** Second Attempt: First Attempt + No allocaing New data
see commit: [[https://github.com/faultypointer/OneBRC/commit/c08cab85d444d44ccf46e2ff15142f97b66eed00][c08cab8]]
*** Time
- 50 Million rows: 8.813 seconds
- Billion rows: 127.065 seconds

*** Explanation
Well I just removed the new allocation of `StationData` if it already existed and just updated the one that was already there. I don't know why I didn't just do this in the first place. Anyway on to the next improvement.

** Third Attempt: actually using the split_once
see commit:
*** Time
- 50 Million rows: 6.988 seconds
- Billion rows: 105.545 seconds
  finally we are getting near other people's first simple attempt
*** Explanation
For some reason I used this to split the line
#+begin_src rust
let line_split: Vec<&str> = line.split(';').collect();
#+end_src

instead of just this
#+begin_src rust
let (station_name, temp) = line.split_once(';').unwrap();
#+end_src

So collecting the vector and stuff added to the time.
* Resource
** Version 1: plain buffer reader + hashmap
- https://doc.rust-lang.org/stable/std/io/struct.BufReader.html#method.buffer
- https://doc.rust-lang.org/std/string/struct.String.html#method.split_once [didnt actually get to use split once] [see third attempt]
- https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry
